{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/button/more-button.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","shiba","console","log","className","alt","src","CardList","count","shibas","content","i","push","map","Shortid","generate","MoreButton","buttonText","clickEvent","handleClick","max","undefined","onClick","type","App","fetchURL","useState","setShebas","setCount","useEffect","fetch","then","res","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAGaA,G,MAAO,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEnB,OADAC,QAAQC,IAAI,gBAEX,qBAAKC,UAAU,iBAAf,SACG,qBAAKC,IAAI,QAAQC,IAAKL,QCDjBM,G,MAAW,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,OAC7BP,QAAQC,IAAR,gBAAqBK,IACrBN,QAAQC,IAAIM,GAEZ,IADA,IAAIC,EAAU,GACNC,EAAI,EAAGA,EAAIH,EAAOG,IACtBD,EAAQE,KAAKH,EAAOE,IAExB,OACA,qBAAKP,UAAU,YAAf,SACKM,EAAQG,KAAI,SAACZ,GAAD,OACT,cAAC,EAAD,CAA+BA,MAAOA,GAA3Ba,IAAQC,mBCblBC,G,MAAa,SAAC,GAAgC,IACnDC,EAAa,iCACbC,EAFkD,EAA7BC,YAOzB,OAPsD,EAAhBX,OAAgB,EAATY,MAIzCH,EAAa,2BACbC,OAAaG,GAGb,wBAAQjB,UAAU,qBAAqBkB,QAASJ,EAAYK,KAAK,SAAjE,SAA2EN,MC2EpEO,EAhFH,WACV,IAIMC,EAFW,uCACF,+CAFA,IAFC,EAOYC,mBAAS,IAPrB,mBAOTjB,EAPS,KAODkB,EAPC,OAQUD,mBAPP,GADH,mBAQTlB,EARS,KAQFoB,EARE,KAWhBC,qBAAU,WACRC,MAAML,GACLM,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIP,EAAUO,MACvBC,OAAM,SAAAH,GACL9B,QAAQC,IAAI,mCAEb,CAACsB,IAMJ,OACE,sBAAKrB,UAAU,MAAf,UACE,2CACA,cAAC,EAAD,CAAUK,OAAQA,EAAQD,MAAOA,IACjC,cAAC,EAAD,CACEW,YATc,WAClBS,EAASpB,EApBQ,IA6BbA,MAASA,EACTY,IA7BS,SCIFgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f030dea1.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\nexport const Card = ({ shiba }) => {\n    console.log('card working')\n    return (\n     <div className='card-container'>\n        <img alt='shiba' src={shiba} />\n    </div>\n    )\n}\n\n\n\n","import React from 'react';\nimport Shortid from 'shortid';\n\nimport { Card } from '../card/card.component'\nimport './card-list.styles.css';\n\nexport const CardList = ({count, shibas}) => {\n    console.log(`count ${count}`)\n    console.log(shibas)\n    let content = [];\n    for(let i = 0; i < count; i++) {\n        content.push(shibas[i])\n    }\n    return(\n    <div className='card-list'>\n        {content.map((shiba) => (\n            <Card key={Shortid.generate()} shiba={shiba} />\n        ))} \n    </div>\n    )\n}\n\n\n","import React from 'react'\nimport './more-button.styles.css'\n\nexport const MoreButton = ({ handleClick, count, max}) => {\n    let buttonText = 'click here to see more shibas!'\n    let clickEvent = handleClick;\n    if(count >= max) { //if we reach the limit of displayed images, change the text of the button and stop the click event\n        buttonText = 'sorry, no more shibas...'\n        clickEvent = undefined;\n    }\n    return(\n        <button className='more-button bouncy' onClick={clickEvent} type='button'>{buttonText}</button>\n    )\n}\n","import './App.css';\nimport React, {useState, useEffect} from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { MoreButton } from './components/button/more-button.component';\n\n\nconst App = () => {\n  const displayNum = 3; //sets the number of images to display initially, also sets the number to add everytime the more button is clicked.\n  const maxNum = 99; //the maximum number of images that can be sent in one api request\n  const proxyUrl = 'https://cors-anywhere.herokuapp.com/'\n  const targetUrl = `http://shibe.online/api/shibes?count=${maxNum}` //uses maxNum. The actual api limit is 100\n  const fetchURL = proxyUrl + targetUrl;\n\n  const [shibas, setShebas] = useState([])\n  const [count, setCount] = useState(displayNum)\n\n    \n  useEffect(() => { //Uses the shiba online api to set the shibas state to an array of images\n    fetch(fetchURL)\n    .then(res => res.json())\n    .then(data => setShebas(data))\n    .catch(res => {\n      console.log('could not complete request')\n    }) \n  }, [fetchURL]) \n\n  const handleClick = () => {\n    setCount(count + displayNum)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Shibas!!!</h1>\n      <CardList shibas={shibas} count={count} />\n      <MoreButton \n        handleClick = {handleClick}\n        count = {count}\n        max = {maxNum}\n      />\n    </div>\n  );\n}\n\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n    \n//     this.state = {\n//       shibas: [],\n//       count: displayNum, //gets initial count from displayNum\n//       max: maxNum\n//     }\n//   }\n//   componentDidMount(){ //Uses the shiba online api to set the shibas state to an array of images\n//     let proxyUrl = 'https://cors-anywhere.herokuapp.com/'\n//     let targetUrl = `http://shibe.online/api/shibes?count=${maxNum}` //uses maxNum. The actual api limit is 100\n//     fetch(proxyUrl + targetUrl)\n//     .then(res => res.json())\n//     .then(data => this.setState({shibas: data}))\n//     .catch(res => {\n//       console.log('could not complete request')\n//     }) \n//   }\n\n//   handleClick = () => {\n//     this.setState((prevState, prevProps) => {\n//       return { count: prevState.count + displayNum }\n//     })\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h1>Shibas!!!</h1>\n//         <CardList shibas={this.state.shibas} count={this.state.count} />\n//         <MoreButton \n//           handleClick = {this.handleClick}\n//           count = {this.state.count}\n//           max = {this.state.max}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}